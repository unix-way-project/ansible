
- name: "Initialize advised operation system configs for replicaset {{ replica_set }}"
  include_role:
     name: community.mongodb.mongodb_linux
  when: inventory_hostname in groups[replica_set]

- name: "Initialize mongodb repository for replicaset {{ replica_set }}"
  include_role:
     name: community.mongodb.mongodb_repository
  when: inventory_hostname in groups[replica_set]

- name: "Install mongodb packages for replicaset {{ replica_set }}"
  include_role:
     name: community.mongodb.mongodb_config
  vars:
     config_repl_set_name: "{{ replica_set }}"
  when: inventory_hostname in groups[replica_set]

- name: "Initialize control server for replicaset {{ replica_set }}"
  ansible.builtin.apt:
    name:
      - python-setuptools
      - python3
      - python3-pip
      - mongodb-org-shell
    state: present
    update_cache: yes
  when: inventory_hostname == groups[replica_set][0]

- name: "Install control server pymongo dependency for replicaset {{ replica_set }}"
  ansible.builtin.pip:
    name:
      - pymongo
    state: present
    executable: pip3
  when: inventory_hostname == groups[replica_set][0]

# Members example: a list
# - "server1.unixway.org:27019"
# - "server2.unixway.org:27019"
# - "server3.unixway.org:27019"
- name: "Initialise MongoDB Config replicaset {{ replica_set }}"
  community.mongodb.mongodb_replicaset:
    replica_set: "{{ replica_set }}"
    login_database: "admin"
    login_host: localhost
    login_port: "{{ mongod_config_port }}"
    members: "{{ groups[replica_set] | map('extract', hostvars, ['ansible_eth1', 'ipv4', 'address']) | zip_longest([], fillvalue=':'+mongod_config_port)| map('join') }}"
  when: inventory_hostname == groups[replica_set][0]
  register: config_status

- name: "Printing status for replicaset {{ replica_set }}"
  ansible.builtin.debug:
    var: config_status
  when: inventory_hostname == groups[replica_set][0]

- name: "Ensure replicaset {{ replica_set }} has reached a converged state"
  community.mongodb.mongodb_status:
    replica_set: "{{ replica_set }}"
    login_database: "admin"
    login_host: localhost
    login_port: "{{ mongod_config_port }}"
    poll: 10
    interval: 10
  when: config_status.changed == True

- name: "Set mongodb administrator role for entire cluster"
  include_role:
    name: community.mongodb.mongodb_auth
  vars:
    mongod_host: "localhost"
    mongod_port: "{{ mongod_config_port }}"
    mongodb_admin_pwd: "{{ mongo_admin_password }}"
  when: inventory_hostname == groups[replica_set][0]
